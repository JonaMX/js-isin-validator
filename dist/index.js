'use strict';

function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
var R = require('ramda');
var countries = require('../data/countries.json');
var getAsciiCode = R.invoker(0, 'charCodeAt');
var isinRegex = /^([a-zA-Z]{2})((?![a-zA-Z]{10}\b)[a-zA-Z0-9]{9})([0-9])$/;
var calcIsinCheckDigit = function calcIsinCheckDigit(isin) {
  var _R$splitAt = R.splitAt(-1, isin),
    _R$splitAt2 = _slicedToArray(_R$splitAt, 1),
    code = _R$splitAt2[0];
  // Convert any alphabetic letters to their numeric equivalents
  var digest = R.compose(R.join(''), R.map(function (d) {
    return R.compose(R.ifElse(R.flip(R.gt)(57), R.flip(R.subtract)(55), R.always(d)), getAsciiCode)(d);
  }))(code);

  // Beginning with the least significant digit (on the right), multiply every other digit by 2.
  var digitsTimesTwo = R.compose(R.join(''), R.addIndex(R.map)(function (val, idx) {
    return R.ifElse(R.compose(R.not, R.modulo(R.__, 2)), R.always(R.compose(R.multiply(2), parseInt)(val)), R.always(val))(idx);
  }), R.reverse)(digest);
  // Add up the resulting digits, calling the result SUM.
  var sum = R.compose(R.sum, R.map(parseInt))(digitsTimesTwo);
  // Find the smallest number ending with a zero that is greater than or equal to SUM, and call it VALUE.
  // Subtract SUM from VALUE, giving the check digit.
  return (10 - sum % 10) % 10;
};
var isIsinValid = function isIsinValid(isin) {
  if (!R.test(isinRegex)(isin)) {
    return false;
  }
  var countryCode = R.take(2, isin);
  if (!R.find(R.propEq(countryCode, 'code'))(countries)) {
    return false;
  }
  var checkDigit = R.compose(parseInt, R.takeLast(1))(isin);
  return R.compose(R.equals(checkDigit), calcIsinCheckDigit)(isin);
};
module.exports = {
  countries: countries,
  isinRegex: isinRegex,
  calcIsinCheckDigit: R.compose(calcIsinCheckDigit, R.toUpper),
  isIsinValid: R.compose(isIsinValid, R.toUpper)
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,